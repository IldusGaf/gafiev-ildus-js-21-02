(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swapi = void 0;
// Для работы со swapi
const fetchUtils_1 = require("../utils/fetchUtils");
const swparams_1 = require("../constants/swparams");
exports.swapi = {
    getMain: (0, fetchUtils_1.createFetch)(swparams_1.objLinks.current),
    getMainNext: (0, fetchUtils_1.createFetch)(swparams_1.objLinks.next), //У меня не получается передать измененное свойство objLinks :(
};
},{"../constants/swparams":3,"../utils/fetchUtils":5}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printPeople = void 0;
const swparams_1 = require("../constants/swparams");
// Функции, возвращающие блоки (DOM=-элементы)
const tbody = document.createElement('tbody');
function printPeople(obj) {
    obj.results.forEach(result => {
        const row = document.createElement('tr');
        const name = document.createElement('td');
        name.innerHTML = result.name;
        row.append(name);
        const height = document.createElement('td');
        height.innerHTML = result.height;
        row.append(height);
        const mass = document.createElement('td');
        mass.innerHTML = result.mass;
        row.append(mass);
        const gender = document.createElement('td');
        gender.innerHTML = result.gender;
        row.append(gender);
        tbody.append(row);
    });
    swparams_1.objLinks.previous = obj.previous;
    swparams_1.objLinks.next = obj.next;
    return tbody;
}
exports.printPeople = printPeople;
},{"../constants/swparams":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objLinks = void 0;
exports.objLinks = {
    previous: null,
    current: 'https://swapi.dev/api/people/',
    next: 'https://swapi.dev/api/people/?page=2',
};
},{}],4:[function(require,module,exports){
"use strict";
// import {printHello} from "./module";
// printHello(prompt())
Object.defineProperty(exports, "__esModule", { value: true });
const swapi_1 = require("./api/swapi"); // Импорт из другого модуля
//import {objLinks} from './constants/swparams.ts'
const swapiComponents_1 = require("./components/swapiComponents");
const table = document.getElementById('table');
const [previousButton, nextButton] = document.querySelectorAll('button');
swapi_1.swapi.getMain((obj) => table.append((0, swapiComponents_1.printPeople)(obj)), console.error);
previousButton.addEventListener('click', handlePreviousButton);
nextButton.addEventListener('click', handleNextButton);
function handleNextButton() {
    table.lastChild.innerHTML = '';
    swapi_1.swapi.getMainNext((obj) => table.append((0, swapiComponents_1.printPeople)(obj)), console.error);
}
function handlePreviousButton() {
    table.lastChild.innerHTML = '';
    swapi_1.swapi.getMain((obj) => table.append((0, swapiComponents_1.printPeople)(obj)), console.error);
}
},{"./api/swapi":1,"./components/swapiComponents":2}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetch = void 0;
// Модуль с утилитами для fetch
const createFetch = (url) => (callback, errorCallback) => {
    fetch(url)
        .then(response => response.json())
        .then(callback)
        .catch(errorCallback);
};
exports.createFetch = createFetch;
},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
